快速入门

1. 数据类型
Number: JavaScript不区分整数和浮点数，统一用Number表示

字符串：字符串是以单引号''或双引号""括起来的任意文本 （单引号和双引号等级，这在C/C++/C#中不一样）

布尔值：

比较运算符：
	等于运算符，有两种：
	第一种是==比较，它会自动转换数据类型再比较，很多时候，会得到非常诡异的结果；
	第二种是===比较，它不会自动转换数据类型，如果数据类型不一致，返回false，如果一致，再比较。
	NaN这个特殊的Number与所有其他值都不相等，包括它自己，唯一能判断NaN的方法是通过isNaN()函数

null和undefined：

数组：	
	数组可以包括任意数据类型。例如：[1, 2, 3.14, 'Hello', null, true]
	另一种创建数组的方法是通过Array()函数实现，例如：new Array(1, 2, 3)

对象：JavaScript的对象是一组由键-值组成的无序集合，键都是字符串类型，值可以是任意数据类型，要获取一个对象的属性，我们用对象变量.属性名

变量：
	同一个变量可以反复赋值，而且可以是不同类型的变量，但是要注意只能用var申明一次（变量本身类型不固定的语言称之为动态语言，JavaSript就是动态语言）
	变量名是大小写英文、数字、$和_的组合，且不能用数字开头
	要显示变量的内容，可以用console.log(x)

strict模式
	如果一个变量没有通过var申明就被使用，那么该变量就自动被申明为全局变量（真是个灾难！）
	ECMA在后续规范中推出了strict模式，在strict模式下运行的JavaScript代码，强制通过var申明变量，未使用var申明变量就使用的，将导致运行错误！
	在JaveScript代码的第一行写上：'use strict';

2. 字符串
转义字符：字符串中的转义字符和其他语言语言

多行字符串：用反引号 ` ... ` 表示，例如：
	`这是一个
	多行
	字符串`;

模板字符串：用`${变量名}`表示，例如：
	var name = '小明';
	var age = 20;
	var message = `你好, ${name}, 你今年${age}岁了!`;

字符串连接：用 + 号

字符串操作：
	length 返回长度
	[]索引字符（字符串是不可变的，对字符串的某个索引赋值，不会有任何错误，但是，也没有任何效果）
	toUpperCase 字符串全部变为大写
	toLowerCase 字符串全部变为小写
	indexOf 搜索指定字符串出现的位置
	substring 返回指定索引区间的子串

3. 数组：
和其他语言不同点：
	给Array的length赋一个新的值会导致Array大小的变化
	通过索引赋值时，索引超过了范围，同样会引起Array大小的变化
	（不建议直接修改Array的大小，访问索引时要确保索引不会越界）

数组操作：
	indexOf 搜索一个指定的元素的位置
	slice 对应String的substring()版本，它截取Array的部分元素，然后返回一个新的Array
	push和pop push()向Array的末尾添加若干元素，pop()则把Array的最后一个元素删除掉
	unshift和shift 往Array的头部添加若干元素，使用unshift()方法，shift()方法则把Array的第一个元素删掉
	sort 对当前Array进行排序
	reverse Array的元素给掉个个，也就是反转
	splice 从指定的索引开始删除若干元素，然后再从该位置添加若干元素
	concat 当前的Array和另一个Array连接起来，并返回一个新的Array
	join 把当前Array的每个元素都用指定的字符串连接起来，然后返回连接后的字符串

4. 对象
	
对象是一种无序的集合数据类型，它由若干键值对组成。
用一个{...}表示一个对象，键值对以xxx: xxx形式申明，用,隔开。
对象的所有属性都是字符串，属性对应的值可以是任意数据类型
访问不存在的属性不报错，而是返回undefined；不存在的属性赋值，则会新增属性

对象操作：
	访问：对象.属性名，如果属性名不是有效变量，则对象['属性名']
	删除：delete 对象.属性名
	检测拥有某属性：'属性名' in 对象
	判断属性自身拥有而非继承：对象.hasOwnProperty('属性名')

5 条件判断
if else if else

6. 循环
for 作用于数组
for in 只作用于对象
while do while

7 Map和Set

对象可以视为其他语言中的Map或Dictionary的数据结构，但有个小问题，就是键必须是字符串

Map:
	Map是一组键值对的结构，具有极快的查找速度
	一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉

	初始化：(1) var m = new Map([['Michael', 95], ['Bob', 75], ['Tracy', 85]])；
			(2) var m = new Map(); // 空Map
				m.set('Michael', 95)
	添加：map.set(键)
	获取：map.get(键)
	是否存在：map.has(键)
	删除：map.delete(键)

Set:
	Set是一组key的集合，但不存储value，没有重复的key

	初始化：(1) var s2 = new Set([1, 2, 3])
			(2) var s1 = new Set()
				s1.add(1)
	添加：set.add(键)
	删除：set.delete(键)

	个人感觉：除了去掉重复的没啥用

8 iterable

遍历Array可以采用下标循环，遍历Map和Set就无法使用下标。ES6标准引入了新的iterable类型，Array、Map和Set都属于iterable类型。具有iterable类型的集合可以通过新的for of循环来遍历。

for in循环由于历史遗留问题，它遍历的实际上是对象的属性名称。一个Array数组实际上也是一个对象，它的每个元素的索引被视为一个属性。手动给Array对象添加了额外的属性后(array.name = 'music'), for in会把额外的属性包含在内，但是Array数组的length不会包含！（所以for in只用于对象）
for of:
	for (var x of a) { ... }

forEach: 
	a.forEach(function (element, index, array) {} 数组
	s.forEach(function (element, sameElement, set) {} Set
	m.forEach(function (value, key, map) {} Map